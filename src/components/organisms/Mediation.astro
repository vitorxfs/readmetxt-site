---
import { Image } from 'astro:assets';
import SectionHeading from '../atom/SectionHeading.astro';
import SectionLayout from './SectionLayout.astro';
import c from '../../content/mediation';
import type { SocialMedia } from '../../content/mediation';
import RenderIcon from '../atom/FeatherIcon';
import type { FeatherIconProps } from '../atom/FeatherIcon';
import profilepic from '../../assets/img/profilepic.png';

const icons: Record<SocialMedia['name'], FeatherIconProps['iconName']> = {
  instagram: 'Instagram',
  linkedin: 'Linkedin',
}

const schema = {
  "@context": "https://schema.org/",
  "@type": "Person",
  "name": c.name,
  "jobTitle": c.title,
  "description": c.description,
  "url": c.socialMedia.find((s) => s.name === 'linkedin'),
}
---

<script type="application/ld+json" set:html={JSON.stringify(schema)} />

<script>
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';

  gsap.registerPlugin(ScrollTrigger);

  gsap.timeline({
    scrollTrigger: {
      trigger: '.mediation-heading',
      start: 'top 80%'
    }
  })
  .fromTo('.mediation-icon, .mediation-heading', { y: 5 }, { y: 0, opacity: 1, duration: 0.5 }, 0.2);

  gsap.timeline({
    scrollTrigger: {
      trigger: '.mediation-picture',
      start: 'top 80%'
    }
  })
  .fromTo('.mediation-picture, .mediation-glow', { y: 10 }, { y: 0, opacity: 1, duration: 0.5 }, 0.2)
  .fromTo('.mediation-name', { y: 5 }, { y: 0, opacity: 1, duration: 0.5 }, 0.3)
  .fromTo('.mediation-title', { y: 5 }, { y: 0, opacity: 1, duration: 0.5 }, 0.32)
  .fromTo('.mediation-description', { y: 5 }, { y: 0, opacity: 1, duration: 0.5 }, 0.36)
  .fromTo('.mediation-socialmedia', { y: 5 }, { y: 0, opacity: 1, duration: 0.5 }, 0.40);

</script>


<SectionLayout aria='Mediação' id="mediacao">
  <span
    class="font-icon text-4xl text-primary drop-shadow-lg mediation-icon opacity-0 hidden md:block"
    slot="icon"
    aria-hidden="true"
  >
    person
  </span>
  <div slot="content" class="w-full h-fit">
    <div class="mediation-heading opacity-0 mb-14 flex gap-4">
      <span
        class="font-icon text-4xl text-primary drop-shadow-lg mediation-icon opacity-0 block md:hidden"
        slot="icon"
        aria-hidden="true"
      >
        person
      </span>
      <SectionHeading>Mediação</SectionHeading>
    </div>

    <div class="flex flex-col lg:flex-row gap-4 h-fit items-stretch">
      <span class="mediation-glow glow opacity-0" />
      <div class="self-stretch max-w-[320px] rounded-[20%] w-full mx-auto lg:ml-0 mediation-picture opacity-0">
        <Image
          class="object-cover h-full"
          alt={c.imageDescription}
          width="350" height="350"
          src={profilepic}
        />
      </div>

      <div class="flex flex-col lg:py-6">
        <div>
          <h2 class="text-2xl font-bold text-center lg:text-left mb-4 lg:mb-0 mediation-name opacity-0">{c.name}</h2>
          <p class="text-sm text-primary mediation-title opacity-0">{c.title}</p>
          <p class="mt-6 leading-6 mediation-description opacity-0">{c.description}</p>
        </div>

        <ul class="flex mt-6 mediation-socialmedia opacity-0">
          {c.socialMedia.map((sm) => (
            <li>
              <a
                astro-prerender
                aria-label={sm.name}
                href={sm.url}
                target="_blank"
                class="text-primary block p-4 -ml-4 hover:brightness-150 transition-all"
              >
                <RenderIcon iconName={icons[sm.name]} />
              </a>
            </li>
          ))}
        </ul>
      </div>
    </div>
  </div>
</SectionLayout>

<style>
  .glow::before {
    width: 300px; height: 300px;
    top: 50px; left:-30px;
    z-index: -1;
  }

  .mediation-picture {
    position: relative;
    overflow:hidden;
    z-index: 2;
  }

  .mediation-picture:hover::after {
    content:'';
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: white;
    top: 0; left: 0;
    opacity: 0;
    background-image: url('/src/assets/img/glitch.gif');
    animation: imgNoise 1000ms;
    mix-blend-mode: soft-light;
  }

  @keyframes imgNoise {
    0% {
      opacity: 0;
    }
    10% {
      opacity: 0.3;
    }
    100% {
      opacity: 0;
    }
  }
</style>
